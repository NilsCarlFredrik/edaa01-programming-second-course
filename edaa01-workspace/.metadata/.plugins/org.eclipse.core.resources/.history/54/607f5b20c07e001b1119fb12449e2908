package sudoku;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class TestSudoku {
	Sudoku test1, test2;
	int[][] solvableGrid = { 
			 {3, 0, 6, 5, 0, 8, 4, 0, 0}, 
	         {5, 2, 0, 0, 0, 0, 0, 0, 0}, 
	         {0, 8, 7, 0, 0, 0, 0, 3, 1}, 
	         {0, 0, 3, 0, 1, 0, 0, 8, 0}, 
	         {9, 0, 0, 8, 6, 3, 0, 0, 5}, 
	         {0, 5, 0, 0, 9, 0, 6, 0, 0}, 
	         {1, 3, 0, 0, 0, 0, 2, 5, 0}, 
	         {0, 0, 0, 0, 0, 0, 0, 7, 4}, 
	         {0, 0, 5, 2, 0, 6, 3, 0, 0} };
	
	int[][] solvedGrid = { 
			  {3, 1, 6, 5, 7, 8, 4, 9, 2},
	          {5, 2, 9, 1, 3, 4, 7, 6, 8},
	          {4, 8, 7, 6, 2, 9, 5, 3, 1},
	          {2, 6, 3, 4, 1, 5, 9, 8, 7},
	          {9, 7, 4, 8, 6, 3, 1, 2, 5},
	          {8, 5, 1, 7, 9, 2, 6, 4, 3},
	          {1, 3, 8, 9, 4, 7, 2, 5, 6},
	          {6, 9, 2, 3, 5, 1, 8, 7, 4},
	          {7, 4, 5, 2, 8, 6, 3, 1, 9} };
	
	int[][] unsolvableGrid = { 
			 { 3, 1, 6, 5, 7, 8, 4, 9, 2 },
	         { 5, 2, 9, 1, 3, 4, 7, 6, 8 },
	         { 4, 8, 7, 6, 2, 9, 5, 3, 1 },
	         { 2, 6, 3, 0, 1, 5, 9, 8, 7 },
	         { 9, 7, 4, 8, 6, 0, 1, 2, 5 },
	         { 8, 5, 1, 7, 9, 2, 6, 0, 3 },
	         { 1, 3, 8, 0, 0, 7, 0, 4, 6 },
	         { 6, 9, 2, 3, 5, 1, 8, 7, 0 },
	         { 7, 4, 5, 0, 8, 6, 3, 1, 0 } };
	
	@BeforeEach
	void setUp() throws Exception {
		test1 = new Sudoku();
		test2 = new Sudoku();
	}

	@AfterEach
	void tearDown() throws Exception {
	}

	@Test
	void testSetGetNumber() {
		assertEquals(test1.getNumber(1,2), 0);
		test1.setNumber(1, 2, 3);
		assertEquals(test1.getNumber(1,2), 3);
		
		assertThrows(IllegalArgumentException.class, () -> test1.setNumber(2, 10, 5));
		assertThrows(IllegalArgumentException.class, () -> test1.setNumber(2, 2, 10));
		assertThrows(IllegalArgumentException.class, () -> test1.getNumber(20, 6));
	}
	
//	@Test
//	void testSetGetException() {
//		
//	}

	@Test
	void testClearNumber() {
		assertEquals(test1.getNumber(1,2), 0);
		test1.setNumber(1, 2, 3);
		test1.clearNumber(1, 2);
		assertEquals(test1.getNumber(1, 2), 0);
	}

	@Test
	void testIsValid() {
		test1.setNumber(1, 2, 3);
		assertTrue(test1.isValid(8, 8, 3), "1");
		assertFalse(test1.isValid(1, 6, 3), "2");
		assertFalse(test1.isValid(8, 2, 3), "3");
		assertFalse(test1.isValid(0, 0, 3), "4");
	}

	@Test
	void testIsAllValid() {
		test1.setMatrix(solvedGrid);
		test2.setMatrix(solvableGrid);
		assertTrue(test1.isAllValid());
		assertFalse(test2.isAllValid());
	}

	@Test
	void testSolve() {
		test1.setMatrix(solvableGrid);
		test2.setMatrix(unsolvableGrid);
		assertFalse(test1.isAllValid());
		assertTrue(test1.solve());
		assertFalse(test2.solve());
		assertTrue(test1.isAllValid());
		test1.clear();
		assertTrue(test1.solve());
		assertTrue(test1.isAllValid());
	}


	@Test
	void testClear() {
		test2 = new Sudoku(solvableGrid);
		test2.clear();
		assertArrayEquals(test2.getMatrix(), new int[9][9], "Grid matrix not empty");
	}

	@Test
	void testSetGetMatrix() {
		test1.setMatrix(solvableGrid);
		assertTrue(test1.getMatrix().equals(solvableGrid), "Matrices not equal");
	}

}
