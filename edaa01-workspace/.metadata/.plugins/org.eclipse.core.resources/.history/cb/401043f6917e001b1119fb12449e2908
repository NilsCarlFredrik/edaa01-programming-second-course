package sudoku;
import java.awt.*;        // Uses AWT's Layout Managers
import java.awt.event.*;  // Uses AWT's Event Handlers
import javax.swing.*;     // Uses Swing's Container/Components
 
/**
 * The Sudoku game.
 * To solve the number puzzle, each row, each column, and each of the
 * nine 3Ã—3 sub-grids shall contain all of the digits from 1 to 9
 */
public class ntuSudoku2 extends JFrame {
   // Name-constants for the game properties
   public static final int GRID_SIZE = 9;    // Size of the board
   public static final int SUBGRID_SIZE = 3; // Size of the sub-grid
 
   // Name-constants for UI control (sizes, colors and fonts)
   public static final int CELL_SIZE = 60;   // Cell width/height in pixels
   public static final int CANVAS_WIDTH  = CELL_SIZE * GRID_SIZE;
   public static final int CANVAS_HEIGHT = CELL_SIZE * GRID_SIZE;
                                             // Board width/height in pixels
   public static final Color OPEN_CELL_BGCOLOR = Color.YELLOW;
   public static final Color OPEN_CELL_TEXT_YES = new Color(0, 255, 0);  // RGB
   public static final Color OPEN_CELL_TEXT_NO = Color.RED;
   public static final Color CLOSED_CELL_BGCOLOR = new Color(240, 240, 240); // RGB
   public static final Color CLOSED_CELL_TEXT = Color.BLACK;
   public static final Font FONT_NUMBERS = new Font("Monospaced", Font.BOLD, 20);
 
   // The game board composes of 9x9 JTextFields,
   // each containing String "1" to "9", or empty String
   private JTextField[][] grid = new JTextField[GRID_SIZE][GRID_SIZE];
 
   // Puzzle to be solved and the mask (which can be used to control the
   //  difficulty level).
   // Hardcoded here. Extra credit for automatic puzzle generation
   //  with various difficulty levels.
 
   /**
    * Constructor to setup the game and the UI Components
    */
   public ntuSudoku2(Sudoku sudoku) {
	   SwingUtilities.invokeLater(() -> createWindow(sudoku));
	  //int [][] puzzle = sudoku.getMatrix();
   }
   
   private void createWindow(Sudoku sudoku) {
      Container pane = getContentPane();
//      pane.setLayout(new GridLayout(GRID_SIZE, GRID_SIZE));  // 9x9 GridLayout
      pane.setLayout(new BorderLayout());
      // Allocate a common listener as the ActionEvent listener for all the
      //  JTextFields
      // ... [TODO 3] (Later) ....
 
      // Construct 9x9 JTextFields and add to the content-pane
      JPanel gridPanel = new JPanel();
      pane.add(gridPanel);
      gridPanel.setPreferredSize(new Dimension(CANVAS_WIDTH, CANVAS_HEIGHT));
      gridPanel.setLayout(new GridLayout(9,9));
      for (int row = 0; row < GRID_SIZE; ++row) {
         for (int col = 0; col < GRID_SIZE; ++col) {
            grid[row][col] = new JTextField(); // Allocate element of array
            gridPanel.add(grid[row][col]);            // ContentPane adds JTextField
            if (row/3==1 && col/3!=1) {
            	grid[row][col].setBackground(OPEN_CELL_BGCOLOR);
            } else if (row/3!=1 && col/3==1) {
            	grid[row][col].setBackground(OPEN_CELL_BGCOLOR);
            }
            if (sudoku.getMatrix()[row][col] == 0) {
               grid[row][col].setText("");     // set to empty string
               grid[row][col].setEditable(true);
               //grid[row][col].setBackground(OPEN_CELL_BGCOLOR);
            } else {
               grid[row][col].setText(sudoku.getMatrix()[row][col] + "");
               grid[row][col].setEditable(true);
//               grid[row][col].setBackground(CLOSED_CELL_BGCOLOR);
//               grid[row][col].setForeground(CLOSED_CELL_TEXT);
            }
            // Beautify all the cells
            grid[row][col].setHorizontalAlignment(JTextField.CENTER);
            grid[row][col].setFont(FONT_NUMBERS);
         }
      }
//      grid[1][1].addActionListener();
      
      JPanel buttonPanel = new JPanel();
      JButton solve = new JButton("Solve");
      JButton clear = new JButton("Clear");
      buttonPanel.add(solve);
      buttonPanel.add(clear);
      
      solve.addActionListener(event -> {
    	  int[][] temp = new int[9][9];
    	  for (int i = 0; i < 9; i++) {
    		  for (int j = 0; j < 9; j++) {
    			  if (grid[i][j].getText().toLowerCase().trim().equals(""))
    				  temp[i][j] = 0;
    			  else
    				  temp[i][j] = Integer.parseInt(
    						  grid[i][j].getText().toLowerCase().trim());
    		  }
    	  }
    	  sudoku.setMatrix(temp);
    	  if (sudoku.solve())
    		  updateGrid(sudoku, grid);
    	  else 
    		  JOptionPane.showMessageDialog(null, "Sudoku not solvable",
    				  						"", JOptionPane.ERROR_MESSAGE);
      });
      clear.addActionListener(event -> {
    	  sudoku.clear();
    	  updateGrid(sudoku, grid);
      });
      
      pane.add(buttonPanel, BorderLayout.SOUTH);
 
      // Set the size of the content-pane and pack all the components
      //  under this container.
//      pane.setPreferredSize(new Dimension(CANVAS_WIDTH, CANVAS_HEIGHT));
      pack();
 
      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  // Handle window closing
      setTitle("Sudoku");
      setSize(700,700);
      setVisible(true);
   }
 
   /** The entry main() entry method */
//   public static void main(String[] args) {
//      // [TODO 1] (Now)
//      // Check Swing program template on how to run the constructor
//      //.......
//	   int[][] solvableGrid = { 
//				 {3, 0, 6, 5, 0, 8, 4, 0, 0}, 
//		         {5, 2, 0, 0, 0, 0, 0, 0, 0}, 
//		         {0, 8, 7, 0, 0, 0, 0, 3, 1}, 
//		         {0, 0, 3, 0, 1, 0, 0, 8, 0}, 
//		         {9, 0, 0, 8, 6, 3, 0, 0, 5}, 
//		         {0, 5, 0, 0, 9, 0, 6, 0, 0}, 
//		         {1, 3, 0, 0, 0, 0, 2, 5, 0}, 
//		         {0, 0, 0, 0, 0, 0, 0, 7, 4}, 
//		         {0, 0, 5, 2, 0, 6, 3, 0, 0} };
//	   
//	   int[][] unsolvableGrid = { 
//				 { 3, 1, 6, 5, 7, 8, 4, 9, 2 },
//		         { 5, 2, 9, 1, 3, 4, 7, 6, 8 },
//		         { 4, 8, 7, 6, 2, 9, 5, 3, 1 },
//		         { 2, 6, 3, 0, 1, 5, 9, 8, 7 },
//		         { 9, 7, 4, 8, 6, 0, 1, 2, 5 },
//		         { 8, 5, 1, 7, 9, 2, 6, 0, 3 },
//		         { 1, 3, 8, 0, 0, 7, 0, 4, 6 },
//		         { 6, 9, 2, 3, 5, 1, 8, 7, 0 },
//		         { 7, 4, 5, 0, 8, 6, 3, 1, 0 } };
//	   
//	   Sudoku sudoku = new Sudoku(unsolvableGrid);
//	   ntuSudoku2 asdf = new ntuSudoku2(sudoku);
//   }

   private void updateGrid(Sudoku sudoku, JTextField[][] grid) {
	   for (int i = 0; i < 9; i++) {
		   for (int j = 0; j < 9; j++){
			   if (sudoku.getMatrix()[i][j] != 0)
			   grid[i][j].setText(sudoku.getMatrix()[i][j] + "");
			   else
				   grid[i][j].setText("");
		   }
	   }
	   
   }
   
   

   // Define the Listener Inner Class
   // ... [TODO 2] (Later) ...
}
